[build-system]
requires = ["setuptools>=48", "setuptools_scm[toml]>=6.3.1"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[project]
name = "{{ cookiecutter.project_name }}"
description = "{{ cookiecutter.short_description or cookiecutter.friendly_name }}"
readme = "README.rst"
license = {text = "{{ cookiecutter.license }}"}
authors = [{ name = "{{ cookiecutter.author }}", email = "{{ cookiecutter.email }}" }]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "{{cookiecutter.development_status}}",
]
requires-python = ">=3.8"
dynamic = ["version"]
dependencies = []

[project.urls]
Issues = "https://github.com/{{cookiecutter.github_user}}/{{ cookiecutter.project_name }}/issues"
Source = "https://github.com/{{cookiecutter.github_user}}/{{ cookiecutter.project_name }}"

[project.optional-dependencies]
{%- if cookiecutter.docs != "False" %}
docs = [
    "mkdocs==1.5.2",
    "mkdocs-gen-files==0.5.0",
    "mkdocs-material==9.3.1",
    "mkdocs-section-index==0.3.6",
    "mkdocstrings-python==1.6.3",
]
{%- endif %}
tests = [
    "pytest==7.2.0",
    "pytest-sugar==0.9.5",
    "pytest-cov==3.0.0",
    "pytest-mock==3.8.2",
    "mypy==0.971",
]
dev = [
    "{{ cookiecutter.project_name }}[tests]",
{%- if cookiecutter.docs != "False" %}
    "{{ cookiecutter.project_name }}[docs]",
{%- endif %}
]

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.pytest.ini_options]
addopts = "-ra"

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.package_name}}", "tests"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "raise AssertionError",
    "@overload",
]

[tool.mypy]
# Error output
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
check_untyped_defs = false
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
files = ["src", "tests"]

[tool.codespell]
ignore-words-list = " "

[tool.ruff]
ignore = [
    "S101", # assert
    "PLR2004", # magic-value-comparison
    "PLW2901", # redefined-loop-name
    "ISC001", # single-line-implicit-string-concatenation
    "SIM105", # suppressible-exception
    "SIM108", # if-else-block-instead-of-if-exp
]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "W", # pycodestyle - Warning
    "E", # pycodestyle - Error
    "F", # pyflakes
    "I", # isort
    "T10", # flake8-debugger
    "S", # flake8-bandit
    "PL", # pylint
    "TCH", # flake8-type-checking
    "UP", # pyupgrade
    "N", # pep8-naming
    "PIE", # flake8-pie
    "ASYNC", # flake8-async
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "SIM", # flake8-simplify
    "ASYNC", # flake8-async
    "INP", # flake8-no-pep420
    "EXE", # flake8-executable
    "PYI", # flake8-pyi
    "RSE", # flake8-raise
    "SLOT", # flake8-slots
    "PGH", # pygrep hooks
    "FLY", # flynt
    "RUF", # ruff
    "G", # flake8-logging-format
    "A", # flake8-builtins
    "TRY", # tryceratops
    "DTZ", # flake8-datetimez
    "RET", # flake8-return
    "PT", # flake8-pytest-style
    "ARG", # flake8-unused-arguments
    "SLF", # flake8-self
    "ICN", # flake8-import-conventions
]
show-source = true
show-fixes = true

[tool.ruff.per-file-ignores]
"tests/**" = ["S", "ARG001", "ARG002"]
{%- if cookiecutter.docs %}
"docs/**" = ["INP"]
{%- endif %}

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.package_name }}"]
